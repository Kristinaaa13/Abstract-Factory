from abc import ABC, abstractmethod

# Абстрактний клас для кнопки
class Button(ABC):
    @abstractmethod
    def click(self):
        pass

# Абстрактний клас для вікна
class Window(ABC):
    @abstractmethod
    def open(self):
        pass

# Абстрактна фабрика
class UIFactory(ABC):
    @abstractmethod
    def create_button(self) -> Button:
        pass

    @abstractmethod
    def create_window(self) -> Window:
        pass

# Конкретна реалізація кнопки для Windows
class WindowsButton(Button):
    def click(self):
        return "Windows Button clicked"

# Конкретна реалізація вікна для Windows
class WindowsWindow(Window):
    def open(self):
        return "Windows Window opened"

# Конкретна реалізація кнопки для macOS
class MacOSButton(Button):
    def click(self):
        return "MacOS Button clicked"

# Конкретна реалізація вікна для macOS
class MacOSWindow(Window):
    def open(self):
        return "MacOS Window opened"

# Конкретна реалізація фабрики для Windows
class WindowsUIFactory(UIFactory):
    def create_button(self) -> Button:
        return WindowsButton()

    def create_window(self) -> Window:
        return WindowsWindow()

# Конкретна реалізація фабрики для macOS
class MacOSUIFactory(UIFactory):
    def create_button(self) -> Button:
        return MacOSButton()

    def create_window(self) -> Window:
        return MacOSWindow()

# Використання
def client_code(factory: UIFactory):
    button = factory.create_button()
    window = factory.create_window()

    return f"{button.click()} and {window.open()}"

# Використання фабрики для Windows
windows_factory = WindowsUIFactory()
result_windows = client_code(windows_factory)
print(f"Windows result: {result_windows}")

# Використання фабрики для macOS
macos_factory = MacOSUIFactory()
result_macos = client_code(macos_factory)
print(f"macOS result: {result_macos}")
